#!/usr/bin/env python
import logging

import argparse
import sys

import yaml

from scalyca import Scalyca
from scalyca import colour as c

from multiprocessing import Pool

import astropy.units as u
from astropy.coordinates import EarthLocation, CartesianDifferential, AltAz, SkyCoord
from astropy.time import Time

from models.meteor import Meteor
from models.observer import Observer

log = logging.getLogger('root')
VERSION = '0.1.1'




def alt_az_from_earthlocations(obs: EarthLocation, target: EarthLocation, obstime=None):
    """
    Compute altitude, azimuth, and distance from one EarthLocation to another.

    Parameters
    ----------
    obs : EarthLocation
        Observer location.
    target : EarthLocation
        Target location.
    obstime : Time, optional
        Observation time. Required for proper AltAz transformation. Defaults to current time.

    Returns
    -------
    alt : Quantity
        Altitude in degrees.
    az : Quantity
        Azimuth in degrees.
    distance : Quantity
        Distance in meters.
    """
    if obstime is None:
        obstime = Time.now()

    # AltAz frame at observer
    altaz_frame = AltAz(location=obs, obstime=obstime)

    # Target as ITRS SkyCoord
    target_coord = SkyCoord(target.get_itrs(obstime=obstime))

    # Transform to observer's AltAz frame
    rpos = target_coord.transform_to(altaz_frame)

    return rpos.alt, rpos.az, rpos.distance


class MeteorObserverCLI(Scalyca):
    _prog = 'Vamos meteor observer'
    _version = VERSION

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.meteors = None
        self.observer = None

    def add_arguments(self):
        self.add_argument('meteors', type=argparse.FileType('r'),
                          help="YAML file with meteor (generated by `simulate`)")
        self.add_argument('observer', type=argparse.FileType('r'),
                          help="Observer YAML file (configs/observers/*.yaml)")
        self.add_argument('--cores', type=int, default=4,
                          help="Number of CPU cores to use")
        self.add_argument('-o', '--outfile', type=argparse.FileType('w'), default=sys.stdout,
                          help="Output YAML file")

    def initialize(self):
        self.meteor = Meteor.load_yaml(self.args.meteors)
        self.observer = Observer.load_dict(yaml.safe_load(self.args.observer))

    def main(self):
        log.info(f"Now observing {self.meteor} by {self.observer}")
        points = self.observer.observe(self.meteor)
        log.info(f"Saving {points} to {c.path(self.args.outfile.name)}")
        points.dump_yaml(self.args.outfile)


observer_cli = MeteorObserverCLI().run()
